// -------------------------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License (MIT). See LICENSE in the repo root for license information.
// -------------------------------------------------------------------------------------------------

using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using EnsureThat;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.DurableTask;
using Microsoft.Extensions.Logging;
using Microsoft.Health.Dicom.Core.Features.Model;
using Microsoft.Health.Dicom.Core.Models.Copy;
using Microsoft.Health.Dicom.Functions.Indexing.Models;
using Microsoft.Health.Operations.Functions.DurableTask;

namespace Microsoft.Health.Dicom.Functions.Copy;

public partial class CopyDurableFunction
{
    /// <summary>
    /// Asynchronously copy DICOM instances.
    /// It goes through DICOM instances in the past, copy to files as new blob format.
    /// </summary>
    /// <param name="context">The context for the orchestration instance.</param>
    /// <param name="logger">A diagnostic logger.</param>
    /// <returns>A task representing the <see cref="CopyInstancesAsync"/> operation.</returns>
    [FunctionName(nameof(CopyInstancesAsync))]
    public async Task CopyInstancesAsync(
        [OrchestrationTrigger] IDurableOrchestrationContext context,
        ILogger logger)
    {
        // The ID should be a GUID as generated by the trigger, but we'll assert here just to make sure!
        EnsureArg.IsNotNull(context, nameof(context)).ThrowIfInvalidOperationId();
        CopyCheckpoint input = context.GetInput<CopyCheckpoint>();
        EnsureArg.IsNotNull(input, nameof(input));
        EnsureArg.IsNotNull(input.Batching, nameof(input.Batching));

        logger = context.CreateReplaySafeLogger(logger);

        IReadOnlyList<WatermarkRange> batches = await context.CallActivityWithRetryAsync<IReadOnlyList<WatermarkRange>>(
            nameof(GetCopyInstanceBatchesAsync),
            _options.RetryOptions,
            new BatchCreationArguments(input.Completed?.Start - 1, input.Batching.Size, input.Batching.MaxParallelCount));

        if (batches.Count > 0)
        {
            // Note that batches are in reverse order because we start from the highest watermark
            // Example: [8,11][4,7][1,3]
            var batchRange = WatermarkRange.Combine(batches);

            logger.LogInformation("Beginning to copy the range {Range}.", batchRange);
            await Task.WhenAll(batches
                .Select(x => context.CallActivityWithRetryAsync(
                    nameof(CopyBatchAsync),
                    _options.RetryOptions,
                    x)));

            // Create a new orchestration with the same instance ID to process the remaining data
            logger.LogInformation("Completed copying the range {Range}. Continuing with new execution...", batchRange);

            WatermarkRange completed = input.Completed.HasValue
                ? input.Completed.Value.Combine(batchRange)
                : batchRange;

            context.ContinueAsNew(
                new CopyCheckpoint
                {
                    Completed = completed,
                    CreatedTime = input.CreatedTime ?? await context.GetCreatedTimeAsync(_options.RetryOptions),
                });
        }
        else
        {
            logger.LogInformation("Completed duplication.");
        }

    }

}
