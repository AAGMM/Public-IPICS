// This file is used by Code Analysis to maintain SuppressMessage
// attributes that are applied to this project.
// Project-level suppressions either have no target or are given
// a specific target and scoped to a namespace, type, member, etc.

using System.Diagnostics.CodeAnalysis;

[assembly: SuppressMessage("Style", "IDE0005:Using directive is unnecessary.", Justification = "Hackathon")]
[assembly: SuppressMessage("Style", "IDE0073:The file header does not match the required text", Justification = "Hackathon")]
[assembly: SuppressMessage("Design", "CA1002:Do not expose generic lists", Justification = "Hackathon")]
[assembly: SuppressMessage("Globalization", "CA1307:Specify StringComparison for clarity", Justification = "Hackathon")]
[assembly: SuppressMessage("Style", "IDE0044:Add readonly modifier")]
[assembly: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1200:Using directives should be placed correctly", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:Elements should be documented", Justification = "Hackathon")]
[assembly: SuppressMessage("Usage", "CA2227:Collection properties should be read only", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:Elements should be documented", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1101:Prefix local calls with this", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1633:File should have header", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1600:Elements should be documented", Justification = "Hackathon")]
[assembly: SuppressMessage("Style", "IDE0073:The file header does not match the required text", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.ReadabilityRules", "SA1101:Prefix local calls with this", Justification = "HAckathon")]
[assembly: SuppressMessage("StyleCop.CSharp.NamingRules", "SA1309:Field names should not begin with underscore", Justification = "HAckathon")]
[assembly: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1203:Constants should appear before fields", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1204:Static elements should appear before instance elements", Justification = "Hackathon")]
[assembly: SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "Hackathon")]
[assembly: SuppressMessage("Performance", "CA1822:Mark members as static", Justification = "Hackathon")]
[assembly: SuppressMessage("Design", "CA1062:Validate arguments of public methods", Justification = "Hackathon")]
[assembly: SuppressMessage("Globalization", "CA1307:Specify StringComparison for clarity", Justification = "Hackathon")]
[assembly: SuppressMessage("Globalization", "CA1304:Specify CultureInfo", Justification = "Hackathon")]
[assembly: SuppressMessage("Design", "CA1062:Validate arguments of public methods", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1202:Elements should be ordered by access", Justification = "Hackathon")]
[assembly: SuppressMessage("Performance", "CA1827:Do not use Count() or LongCount() when Any() can be used", Justification = "Hackathon")]
[assembly: SuppressMessage("Naming", "CA1725:Parameter names should match base declaration", Justification = "Hackathon", Scope = "member")]
[assembly: SuppressMessage("Naming", "CA1725:Parameter names should match base declaration", Justification = "Hackathon", Scope = "member")]
[assembly: SuppressMessage("StyleCop.CSharp.OrderingRules", "SA1204:Static elements should appear before instance elements", Justification = "Hackathon")]
[assembly: SuppressMessage("Performance", "CA1819:Properties should not return arrays", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1629:Documentation text should end with a period", Justification = "Hackathon")]
[assembly: SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1602:Enumeration items should be documented", Justification = "Hackathon")]
[assembly: SuppressMessage("Design", "CA1008:Enums should have zero value", Justification = "Hackathon")]
[assembly: SuppressMessage("Globalization", "CA1309:Use ordinal string comparison", Justification = "Hackathon", Scope = "member", Target = "~M:Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerVRRule.LocateDicomTag(Dicom.DicomDataset,Microsoft.Health.Dicom.Anonymizer.Core.Models.ProcessContext)~System.Collections.Generic.List{Dicom.DicomItem}")]
[assembly: SuppressMessage("Design", "CA1052:Static holder types should be Static or NotInheritable", Justification = "Hackathon", Scope = "type", Target = "~T:Microsoft.Health.Dicom.Anonymizer.Core.Processors.DicomDataModel")]
[assembly: SuppressMessage("Design", "CA1012:Abstract types should not have public constructors", Justification = "Hackathon", Scope = "type", Target = "~T:Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerRule")]
[assembly: SuppressMessage("Design", "CA1002:Do not expose generic lists", Justification = "<Pending>", Scope = "member", Target = "~M:Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerRule.LocateDicomTag(Dicom.DicomDataset,Microsoft.Health.Dicom.Anonymizer.Core.Models.ProcessContext)~System.Collections.Generic.List{Dicom.DicomItem}")]
[assembly: SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1404:Code analysis suppression should have justification", Justification = "<Pending>")]
[assembly: SuppressMessage("Naming", "CA1725:Parameter names should match base declaration", Justification = "<Pending>", Scope = "member", Target = "~M:Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerRuleFactory.CreateDicomAnonymizationRule(Newtonsoft.Json.Linq.JObject)~Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerRule")]
[assembly: SuppressMessage("Naming", "CA1725:Parameter names should match base declaration", Justification = "<Pending>", Scope = "member", Target = "~M:Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerRuleFactory.CreateDicomAnonymizationRules(Newtonsoft.Json.Linq.JObject[])~Microsoft.Health.Dicom.Anonymizer.Core.Rules.AnonymizerRule[]")]
