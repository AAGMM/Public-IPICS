name: CleanupAzureResources

on:
  pull_request:
    types: [closed]

permissions:
   id-token: write
   contents: write

jobs:

  cleanup:
    runs-on: windows-latest # AzureAD PS module requires Windows.

    env:
      RG_REGION: 'southcentralus'
      PR_NUMBER: "${{ github.event.pull_request.number }}"
      DEPLOYMENT_NAME: "msh-dicom-pr-${{ PR_NUMBER }}"

    steps:
      - name: Checkout Current Branch to access Custom Powershell Modules
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: "${{ github.base_ref }}"

      # refer: https://microsofthealth.visualstudio.com/Health/_wiki/wikis/Health.wiki/163/OSS-CI
      - name: Login via Az module
        uses: azure/login@v1.4.1
        with:
          client-id: "${{secrets.AZ_DEVOPS_APP_ID}}"
          tenant-id: "${{secrets.AZ_DEVOPS_TENANT_ID}}"
          subscription-id: "${{secrets.AZ_DEVOPS_SUBSCRIPTION_ID}}"
          enable-AzPSSession: true

      - name: Clean Up Azure Resource Groups
        uses: azure/powershell@v1.1.0
        with:
          azPSVersion: latest
          inlineScript: | 
            $azContext = Get-AzContext

            Get-AzResourceGroup -DefaultProfile $azContext -Name ${{ DEPLOYMENT_NAME }} | Remove-AzResourceGroup -Verbose -Force

      - name: Purge key vault
        uses: azure/powershell@v1.1.0
        with:
          azPSVersion: latest
          inlineScript: | 
            $azContext = Get-AzContext

            $kv = Get-AzKeyVault -DefaultProfile $azContext -VaultName ${{ DEPLOYMENT_NAME }} -Location ${{ RG_REGION }} -InRemovedState

            if ($kv -eq $null -or $kv.Count -eq 0) {
              Write-Host "No KeyVaults are found."
            } else {
              [string]$kvName = $kv.VaultName
              Write-Host "Purging Key Vault $kvName"
              Remove-AzKeyVault -DefaultProfile $azContext -VaultName $kvName -InRemovedState -Location $kv.Location -Force
            }

      - name: Get resolute tenant information from Azure key vault
        uses: Azure/get-keyvault-secrets@v1
        with:
          keyvault: "resolute-oss-tenant-info"
          secrets: 'tenant-admin-service-principal-name, tenant-admin-service-principal-password, tenant-admin-user-name, tenant-admin-user-password, tenant-id'
        id: getResoluteSettingsAction

      - name: Azure logout
        run: az logout

      - name: Delete AAD apps
        uses: azure/powershell@v1.1.0
        with:
          azPSVersion: latest
          inlineScript: | 

            Install-Module -Name AzureAD -Repository PSGallery -Scope CurrentUser -AcceptLicense -AllowClobber -Force
            Import-Module -Name AzureAD

            $username = "${{steps.getResoluteSettingsAction.outputs.tenant-admin-user-name}}"
            $clientId = "${{steps.getResoluteSettingsAction.outputs.tenant-admin-service-principal-name}}"
            $clientSecret = "${{steps.getResoluteSettingsAction.outputs.tenant-admin-service-principal-password}}"
            $tenantId = "${{steps.getResoluteSettingsAction.outputs.tenant-id}}"

            $resource = "https://graph.windows.net/"
            $adTokenUrl = "https://login.microsoftonline.com/$tenantId/oauth2/token"

            $body = @{
                grant_type    = "client_credentials"
                client_id     = $clientId
                client_secret = $clientSecret
                resource      = $resource
            }

            $response = Invoke-RestMethod -Method 'Post' -Uri $adTokenUrl -ContentType "application/x-www-form-urlencoded" -Body $body
            Connect-AzureAD -TenantId $tenantId -AadAccessToken $response.access_token -AccountId $username

            Import-Module ${{ github.workspace }}/samples/scripts/PowerShell/DicomServer.psd1
            Import-Module ${{ github.workspace }}/release/scripts/PowerShell/DicomServerRelease/DicomServerRelease.psd1

            Remove-AadTestAuthEnvironment -TestAuthEnvironmentPath ${{ github.workspace }}/testauthenvironment.json -EnvironmentName ${{ DEPLOYMENT_NAME }} -TenantIdDomain $tenantId
