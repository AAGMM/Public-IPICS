steps:
- task: DownloadBuildArtifacts@0
  inputs:
    buildType: 'current'
    downloadType: 'single'
    downloadPath: '$(System.ArtifactsDirectory)'
    artifactName: 'IntegrationTests'

- script: dotnet tool restore
  displayName: 'dotnet tool restore'

# Use the coverlet.console dotnet tool to generate code coverage and execute the test runner
# because we cannot leverage build-time dependencies like coverlet.collector without using dotnet test
# with a .csproj instead of a DLL
- script: |
    dotnet coverlet $(testAssembly) \
    -f "cobertura" \
    -o "$(Agent.TempDirectory)/TestResults/" \
    -t "dotnet" \
    -a "test $(testAssembly) --filter Category!=bvt-dp -l trx --results-directory $(Agent.TempDirectory)/TestResults -v normal" \
    --include "[Microsoft.Health.Dicom*]*" \
    --exclude "[*Tests*]*" \
    --exclude-by-file "**/*.g.cs,**/*.Generated.cs" \
    --use-source-link
  displayName: 'dotnet test Microsoft.Health.Dicom.Web.Tests.E2E.dll'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '*.trx'
    searchFolder: '$(Agent.TempDirectory)/TestResults'
    testRunTitle: 'E2E Tests'
    buildConfiguration: '$(buildConfiguration)'

- task: PublishPipelineArtifact@1
  displayName: 'Output Code Coverage'
  condition: succeededOrFailed()
  inputs:
    artifactName: 'CodeCoverage.E2ETests'
    path: '$(Agent.TempDirectory)/TestResults/coverage.cobertura.xml'
