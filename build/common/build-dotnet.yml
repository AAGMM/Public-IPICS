parameters:
  packageArtifacts: true
  packageNugets: true

steps:
  - task: UseDotNet@2
    displayName: 'Use .NET sdk'
    inputs:
      useGlobalJson: true

  - task: DotNetCoreCLI@2
    displayName: 'dotnet build $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration) -warnaserror -p:AssemblyVersion="$(assemblySemVer)" -p:FileVersion="$(assemblySemFileVer)" -p:InformationalVersion="$(informationalVersion)" -p:ContinuousIntegrationBuild=true'

  - task: DotNetCoreCLI@2
    displayName: 'dotnet test UnitTests'
    inputs:
      command: test
      projects: '**/*UnitTests/*.csproj'
      arguments: '--configuration $(buildConfiguration) -p:ContinuousIntegrationBuild=true --no-build --collect "XPlat Code Coverage" -s "$(build.sourcesDirectory)/CodeCoverage.runsettings" -v normal'

  - task: reportgenerator@5
    displayName: 'Aggregate Code Coverage'
    condition: succeededOrFailed()
    inputs:
      reports: '$(Agent.TempDirectory)/*/coverage.cobertura.xml'
      reporttypes: 'Cobertura'
      targetdir: '$(Agent.TempDirectory)/coverage'

  - task: PublishPipelineArtifact@1
    displayName: 'Output Code Coverage'
    condition: succeededOrFailed()
    inputs:
      artifactName: 'CodeCoverage.UnitTests'
      path: '$(Agent.TempDirectory)/coverage/Cobertura.xml'

  - task: ComponentGovernanceComponentDetection@0
    inputs:
      scanType: 'Register'
      verbosity: 'Verbose'
      alertWarningLevel: 'High'
      failOnAlert: true

  - ${{ if eq(parameters.packageArtifacts, 'true') }}:
    - template: package.yml

  - ${{ if eq(parameters.packageNugets, 'true') }}:
    - template: package-nugets.yml
