parameters:
- name: runLocally
  type: boolean
  default: true

jobs:
- job: SetupAndRun
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - task: UseDotNet@2
    displayName: 'Use .Net Core sdk'
    inputs:
      useGlobalJson: true

  - ${{ if eq(parameters.runLocally, true) }}:
    - bash: |
        docker-compose -f ./docker/docker-compose.yml -f ./docker/docker-compose.dependencies.yml -f ./docker/docker-compose.features.yml up --build -d
        echo "##vso[task.setvariable variable=TestEnvironmentUrl]http://localhost:63839/"
      displayName: 'Run docker-compose'
  - ${{ else }}:
    - task: AzurePowerShell@4
      displayName: 'Set Variables'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        azurePowerShellVersion: latestVersion
        ScriptType: inlineScript
        Inline: |
          $secrets = Get-AzKeyVaultSecret -VaultName $(deploymentName)-ts

          foreach($secret in $secrets)
          {
              $environmentVariableName = $secret.Name.Replace("--","_")
              $secretValue = Get-AzKeyVaultSecret -VaultName $(deploymentName)-ts -Name $secret.Name -AsPlainText
              Write-Host "##vso[task.setvariable variable=$($environmentVariableName)]$($secretValue)"
          }

          Write-Host "##vso[task.setvariable variable=Resource]$(testFeaturesEnabledEnvironmentUrl)"
          Write-Host "##vso[task.setvariable variable=security_scope]$(testApplicationScope)"
          Write-Host "##vso[task.setvariable variable=security_resource]$(testApplicationResource)"
          Write-Host "##vso[task.setvariable variable=security_enabled]$true"

          dotnet dev-certs https

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: '$(System.ArtifactsDirectory)'
      artifactName: 'IntegrationTests'

  - script: dotnet test "Microsoft.Health.Dicom.Web.Tests.E2E.dll" --filter "FullyQualifiedName~Microsoft.Health.Dicom.Web.Tests.E2E.Rest.DataPartitionEnabledTests" --logger trx --results-directory "$(Agent.TempDirectory)/TestResults"
    displayName: 'dotnet test Microsoft.Health.Dicom.Web.Tests.E2E.dll'
    workingDirectory: '$(System.ArtifactsDirectory)/IntegrationTests/Microsoft.Health.Dicom.Web.Tests.E2E'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'XUnit'
      testResultsFiles: '*.trx'
      searchFolder: '$(Agent.TempDirectory)/TestResults'
      testRunTitle: 'Partitioned E2E Tests'
      buildConfiguration: '$(buildConfiguration)'

  - ${{ if eq(parameters.runLocally, true) }}:
    - script: docker-compose -f ./docker/docker-compose.yml -f ./docker/docker-compose.dependencies.yml -f ./docker/docker-compose.features.yml rm -s -f
      displayName: 'Stop docker-compose'
      condition: always()
