# DESCRIPTION:
# Builds, tests and packages the solution for the CI build configuration.
name: $(SourceBranchName)-$(Date:yyyyMMdd)$(Rev:-r)

variables:
- template: ci-variables.yml

trigger:
  branches:
    include:
    - main

pr: none

stages:
- stage: UpdateVersion
  displayName: 'Determine Semantic Version'
  jobs:
  - job: GitVersion
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: ./update-semver.yml

- stage: BuildElectron
  displayName: 'Build Electron Tool'
  jobs:
  - job: NodeJs
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: build-electron.yml

- stage: BuildDotNet
  displayName: 'Build and Run Unit Tests'
  dependsOn:
  - UpdateVersion
  variables:
    assemblySemVer: $[stageDependencies.UpdateVersion.Semver.outputs['DicomVersion.GitVersion.AssemblySemVer']]
    assemblySemFileVer: $[stageDependencies.UpdateVersion.Semver.outputs['DicomVersion.GitVersion.AssemblySemFileVer']]
    informationalVersion: $[stageDependencies.UpdateVersion.Semver.outputs['DicomVersion.GitVersion.InformationalVersion']]
    majorMinorPatch: $[stageDependencies.UpdateVersion.Semver.outputs['DicomVersion.GitVersion.MajorMinorPatch']]
    nuGetVersion: $[stageDependencies.UpdateVersion.Semver.outputs['DicomVersion.GitVersion.SemVer']]
  jobs:
  - job: DotNet
    displayName: 'Build DICOM Projects'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: build-dotnet.yml

- stage: AnalyzeSecurity
  displayName: 'Run Security Analysis'
  dependsOn:
  - BuildDotNet
  jobs:
  - job: Guardian
    displayName: 'Run Guardian Tools'
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: analyze.yml

- stage: DeployTestEnvironment
  displayName: 'Deploy Test Environment'
  dependsOn:
  - BuildDotNet
  jobs:
  - template: deploy.yml

- stage: ValidateAPIVersioning
  displayName: 'Detect Breaking Changes In API'
  dependsOn:
  - BuildDotNet
  jobs:
  - template: versioning.yml

- stage: DeployFeaturesEnabledWebapp
  displayName: 'Deploy features-enabled webapp'
  dependsOn:
  - DeployTestEnvironment
  jobs:
  - template: deploy-features-enabled-webapp.yml

- stage: RunIntegrationTests
  displayName: 'Run Integration Tests'
  dependsOn:
  - DeployTestEnvironment
  jobs:
  - template: run-integration-tests.yml
    parameters:
      runLocally: false

- stage: RunE2ETests
  displayName: 'Run E2E Tests'
  dependsOn:
  - DeployTestEnvironment
  jobs:
  - template: run-e2e-tests.yml
    parameters:
      runLocally: false

- stage: RunE2EFeaturesEnabledTests
  displayName: 'Run E2E features-enabled tests'
  dependsOn:
  - DeployFeaturesEnabledWebapp
  jobs:
  - template: run-e2e-features-enabled-tests.yml
    parameters:
      runLocally: false

- stage: PublishNuget
  displayName: 'Publish NuGet Packages'
  dependsOn:
  - AnalyzeSecurity
  - ValidateAPIVersioning
  - RunIntegrationTests
  - RunE2ETests
  - RunE2EFeaturesEnabledTests
  jobs:
  - job: PublishNugets
    pool:
      vmImage: 'windows-latest'
    steps:
    - template: publish-nuget.yml

- stage: PublishContainer
  displayName: 'Publish Docker CI Container'
  dependsOn:
  - AnalyzeSecurity
  - ValidateAPIVersioning
  - RunIntegrationTests
  - RunE2ETests
  - RunE2EFeaturesEnabledTests
  jobs:
  - job: 'Docker'
    displayName: 'Build and Push Docker Images'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - template: docker-build-push.yml
      parameters:
        tag: $(imageTag)
