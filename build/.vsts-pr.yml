# DESCRIPTION: 
# Builds, tests and packages the solution for all PR requests.

name: pr$(system.pullRequest.pullRequestNumber)-$(Date:yyyyMMdd)$(Rev:-r)
trigger: none

variables:
- template: pr-variables.yml

stages:
- stage: BuildRunUnitTests
  displayName: 'Build and run unit tests'
  dependsOn: []
  jobs:
  - job: Windows
    pool:
      vmImage: $(windowsVmImage)
    steps:
    - template: build.yml

  - job: Linux
    pool:
     vmImage: 'ubuntu-latest'
    steps:
    - template: build.yml
      parameters:
        packageArtifacts: false

- stage: DeployTestEnvironment
  displayName: 'Deploy Test Environment'
  dependsOn: 
  - BuildRunUnitTests
  jobs:
  - job: provision
    pool:
      vmImage: $(windowsVmImage)
    steps:
    - task: AzurePowerShell@4
      displayName: 'New Resource Group'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        azurePowerShellVersion: latestVersion
        ScriptType: InlineScript
        Inline: |
          New-AzResourceGroup -Name "$(resourceGroupName)" -Location "$(resourceGroupRegion)" -Force
    - template: ./jobs/add-aad-test-environment.yml
    - task: AzurePowerShell@4
      displayName: 'New Azure resource group deployment'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        azurePowerShellVersion: latestVersion
        ScriptType: InlineScript
        Inline: |
          
          $deployPath = "$(System.DefaultWorkingDirectory)/samples/templates"
      
          $additionalProperties = @{
              "SqlServer__DeleteAllDataOnStartup" = "true"
          }
      
          Add-Type -AssemblyName System.Web
          $templateParameters = @{
              appServicePlanResourceGroup = "$(appServicePlanResourceGroup)"
              appServicePlanName = "$(appServicePlanName)"
              serviceName = "$(deploymentName)"
              additionalDicomServerConfigProperties = $additionalProperties
              sqlAdminPassword = "PasswordSql1"
              securityAuthenticationAuthority = "https://login.microsoftonline.com/$(tenant-id)"
              securityAuthenticationAudience = "$(testEnvironmentUrl)"
          }
          
          New-AzResourceGroupDeployment -Name "$(deploymentName)" -ResourceGroupName "$(resourceGroupName)" -TemplateFile $deployPath/default-azuredeploy.json -TemplateParameterObject $templateParameters -Verbose
          
          Set-AzKeyVaultAccessPolicy -VaultName "$(deploymentName)" -ObjectId $(azureServiceConnectionOid) -PermissionsToSecrets list,get

    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'deploy'
    
    - task: AzureRmWebAppDeployment@3
      displayName: 'Azure app service deployment'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        WebAppName: '$(deploymentName)'
        Package: $(System.ArtifactsDirectory)/Microsoft.Health.Dicom.Web.zip'
        TakeAppOfflineFlag: true

- stage: RunIntegrationTests
  displayName: 'Integration tests'
  dependsOn:
  - DeployTestEnvironment
  jobs:
  - job: SetupAndRun
    pool:
      vmImage: $(windowsVmImage)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk '
      inputs:
        useGlobalJson: true
    - task: AzurePowerShell@4
      displayName: 'Prepare for Testing'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        azurePowerShellVersion: latestVersion
        ScriptType: InlineScript
        Inline: |
          $secrets = Get-AzKeyVaultSecret -VaultName $(deploymentName)
          
          foreach ($secret in $secrets)
          {
              $environmentVariableName = $secret.Name.Replace("--",":")
              $secretValue = Get-AzKeyVaultSecret -VaultName $(deploymentName) -Name $secret.Name
              Write-Host "##vso[task.setvariable variable=$($environmentVariableName)]$($secretValue.SecretValueText)"
          }
          
          dotnet dev-certs https
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'IntegrationTests'
    - task: VSTest@2
      displayName: 'Integration Tests'
      inputs:
        testAssemblyVer2: '**\*Tests.Integration.dll'
        searchFolder: '$(System.ArtifactsDirectory)'
        
- stage: RunE2ETests
  displayName: 'E2E tests'
  dependsOn:
  - DeployTestEnvironment
  jobs:
  - job: SetupAndRun
    pool:
      vmImage: $(windowsVmImage)
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net Core sdk '
      inputs:
        useGlobalJson: true
    - task: AzurePowerShell@4
      displayName: 'Prepare for Testing'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        azurePowerShellVersion: latestVersion
        ScriptType: InlineScript
        Inline: |
          $secrets = Get-AzKeyVaultSecret -VaultName $(deploymentName)
          
          foreach ($secret in $secrets)
          {
              $environmentVariableName = $secret.Name.Replace("--",":")
              $secretValue = Get-AzKeyVaultSecret -VaultName $(deploymentName) -Name $secret.Name
              Write-Host "##vso[task.setvariable variable=$($environmentVariableName)]$($secretValue.SecretValueText)"
          }
          
          dotnet dev-certs https
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        downloadPath: '$(System.ArtifactsDirectory)'
        artifactName: 'IntegrationTests'
    - task: VSTest@2
      displayName: 'E2E Tests'
      inputs:
        testAssemblyVer2: '**\*Tests.E2E*.dll'
        searchFolder: '$(System.ArtifactsDirectory)'   

- stage: Cleanup
  displayName: 'Cleanup Azure Environment'
  dependsOn:
  - RunIntegrationTests
  - RunE2ETests
  jobs:
  - template: ./jobs/cleanup.yml
