parameters:
- name: runLocally
  type: boolean
  default: false

jobs:
- job: SetupAndRun
  displayName: 'Integration Tests'
  pool:
    vmImage: 'ubuntu-latest'
  steps:

  - task: UseDotNet@2
    displayName: 'Use .Net Core sdk'
    inputs:
      useGlobalJson: true

  - ${{ if eq(parameters.runLocally, true) }}:
    - bash: |
        # Set Environment Variables
        echo "##vso[task.setvariable variable=BlobStore__ConnectionString]UseDevelopmentStorage=true"
        echo "##vso[task.setvariable variable=SqlServer__ConnectionString]Server=(local);Persist Security Info=False;User ID=sa;Password=L0ca1P@ssw0rd;MultipleActiveResultSets=False;Connection Timeout=30;TrustServerCertificate=true"

        # Start Azurite
        docker run -p 10000:10000 -p 10001:10001 -p 10002:10002 -d --rm --name azure-storage mcr.microsoft.com/azure-storage/azurite:latest

        # Start SQL Server
        docker build -t fulltext-mssql -f "docker/sql/Dockerfile" .
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=L0ca1P@ssw0rd" -p 1433:1433 -d --rm --name sql-server fulltext-mssql

        # Wait for SQL to start
        for i in {1..6}; do docker exec sql-server sh -c "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P L0ca1P@ssw0rd -Q 'SELECT * FROM INFORMATION_SCHEMA.TABLES'" && exit 0 || sleep 5; done; exit 1
      displayName: 'Start Docker Dependencies'

  - ${{ else }}:
    - task: AzurePowerShell@4
      displayName: 'Prepare for Testing'
      inputs:
        azureSubscription: $(azureSubscriptionName)
        azurePowerShellVersion: latestVersion
        ScriptType: InlineScript
        Inline: |
          $sqlConnectionString = Get-AzKeyVaultSecret -VaultName $(deploymentName) -Name "SqlServerConnectionString" -AsPlainText
          $blobConnectionString = Get-AzKeyVaultSecret -VaultName $(deploymentName) -Name "AzureStorageConnectionString" -AsPlainText

          Write-Host "##vso[task.setvariable variable=BlobStore__ConnectionString]$blobConnectionString"
          Write-Host "##vso[task.setvariable variable=SqlServer__ConnectionString]$sqlConnectionString"

          dotnet dev-certs https

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      downloadPath: '$(System.ArtifactsDirectory)'
      artifactName: 'IntegrationTests'

  - script: dotnet test "Microsoft.Health.Dicom.Tests.Integration.dll" --logger trx --results-directory "$(Agent.TempDirectory)/TestResults"
    displayName: 'dotnet test Microsoft.Health.Dicom.Tests.Integration.dll'
    workingDirectory: '$(System.ArtifactsDirectory)/IntegrationTests/Microsoft.Health.Dicom.Tests.Integration'
    env:
      BlobStore__ConnectionString: '$(BlobStore__ConnectionString)'
      SqlServer__ConnectionString: '$(SqlServer__ConnectionString)'

  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '*.trx'
      searchFolder: '$(Agent.TempDirectory)/TestResults'
      buildConfiguration: '$(buildConfiguration)'

  - ${{ if eq(parameters.runLocally, true) }}:
    - script: |
        docker stop azure-storage
        docker stop sql-server
      displayName: 'Stop Docker Dependencies'
      condition: always()
